# This file contains the standard Makefile rules for ELKS, and assumes that
# it is included in the Makefile in every directory in the ELKS tree that
# is part of the ELKS compilation. Those directories that are NOT part of
# the ELKS compilation (such as the directories containing tools used to
# compile ELKS) should NOT include this file, but should define their own
# version of these rules.
#
# Note that several standard rules are defined herein. All are defined in
# a recursive manner, in that they descend into all subdirectories of the
# directory they are called in and repeat the rule, so they should either
# be defined by including this file or by directly defining them in the
# Makefile in that directory, but not by doing both.
#
# In addition to the above, the following rules MUST be defined in each
# Makefile in the ELKS source tree:
#
#	cleandir	Does anything needed to clean up that directory
#			that is not done by the standard rules, which
#			delete any files with names matching *~ *.a or
#			*.o or called core or tmp_make and additionally
#			deletes any *.s files where there is a matching
#			*.c or *.S file in the same directory.
#
#	distdir 	Copies any files across to the distribution tree
#			that are not copied by the standard rules, but
#			which need to be part of the distribution. These
#			standard rules copy all files matching *.c *.h
#			*.S or *.1 or named Makefile to the correct
#			directory in the distribution tree.
#
# If either of these have nothing to do in a particular directory, they
# should be defined with an action of `@echo -n' instead.
#
# Note that a basic Makefile that does nothing other than to allow the
# standard rules to work can be obtained by running `make tree`
#
#########################################################################
# Define current ELKS version number.

VERSION 	= 0
PATCHLEVEL	= 0
SUBLEVEL	= 88
PRE		= 1		# If we're not a pre, comment this line.

#########################################################################
# Specify architecture to use.

ARCH		= i86

#########################################################################
# ROOT_DEV specifies the default root-device when making the image. This
# does not yet work under ELKS. See include/linuxmt/config.h to change
# the root device.

ROOT_DEV	= FLOPPY

#########################################################################
#									#
#  There should normally be no reason to make any changes beyond here.  #
#									#
#########################################################################

#########################################################################
# Variables derived directly from the ELKS version number.

VSNCODE1	= $(shell printf '0x%02X%02X%02X' \
			$(VERSION) $(PATCHLEVEL) $(SUBLEVEL)

ifneq (X$(PRE), X)

VSNCODE 	= $(shell printf '0x%06X%02X' $$[$(VSNCODE1)-1] $(PRE))

VSN		= $(shell printf '%u.%u.%u-pre%u' \
			$(VERSION) $(PATCHLEVEL) $(SUBLEVEL) $(PRE))
else

VSNCODE 	= $(VSNCODE1)00

VSN		= $(shell printf '%u.%u.%u' \
			$(VERSION) $(PATCHLEVEL) $(SUBLEVEL))
endif

DIST		= elks-$(VSN)

#########################################################################
# Define root directory.

TOPDIR		= $(shell cd "$(ELKSDIR)" ; \
			  if [ "$$PWD" != "" ]; then echo $$PWD; \
						else pwd; \
			  fi)

#########################################################################
# Define various directories.
#
#	ARCHDIR 	Directorry for architecture-specific stuff.
#
#	DISTDIR 	Directory for clean copy of distribution.
#
#	INCDIR		Include file directory.
#
#	LIBDIR		Libraries directory.
#
#	MYDIR		Current directory relative to TOPDIR/.
#
#########################################################################

ARCH_DIR	= arch/$(ARCH)

DISTDIR 	= $(TOPDIR)/$(DIST)

INCDIR		= $(TOPDIR)/include

MYDIR		= $(shell pwd | sed 's=$$=/.=;s=^$(TOPDIR)/==')

LIBDIR		= $(TOPDIR)/lib

#########################################################################
# Define target for `make nbImage` command.

TARGET_NB_IMAGE = $(ELKSDIR)/nbImage

#########################################################################
# Determine current shell.

CONFIG_SHELL := $(shell if [ -x "$$bash" ]; \
				then echo $$bash; \
				else if [ -x /bin/bash ]; \
						then echo /bin/bash; \
						else echo sh; \
				     fi; \
			fi)

#########################################################################
# Specify contents of architecture-specific flags.

ifeq ($(CONFIG_ARCH_SIBO), y)

ASARCH		=
CCARCH		=
CPARCH		=
LDARCH		= -D 0xC00 -H 0x480
LTARCH		=

else

ASARCH		=
CCARCH		=
CPARCH		=
LDARCH		=
LTARCH		=

endif

#########################################################################
# Specify standard programs and flags.

AR		= ar

AS86		= as86
AFLAGS		= $(ASARCH) -0 -j -j

CC		= bcc
CFLAGS	 	= $(CCARCH) -I$(INCDIR) -D__KERNEL__ -0 -O -i

CPP		= bcc
CPFLAGS 	= $(CPARCH) -I$(INCDIR) -D__KERNEL__ -E

LD		= ld
LDFLAGS 	= $(LDARCH)

LD86		= ld86
L8FLAGS 	= $(LDARCH) -0 -i

LINT		= lclint
LTFLAGS 	= $(LTARCH) -I$(INCDIR) -D__KERNEL__

#########################################################################
# Export all of these variables.

.EXPORT_ALL_VARIABLES:

#########################################################################
# General construction rules.

.c.s:
	$(CC) $(CFLAGS) -0 -S -o $*.s $<

.cpp.o:
	$(CPP) $(CPFLAGS) -o $*.o $<

.htm.txt:
	lynx -dump $< > $*.txt

.html.txt:
	lynx -dump $< > $*.txt

.s.o:
	$(AS86) $(AFLAGS) -o $*.o $<

.S.s:
	gcc -D__KERNEL__ -I$(INCDIR) -E -traditional -o $*.s $<

#########################################################################
# Specify default rule to use if no other rule is defined.

elks:
	make -C $(ELKSDIR) all

#########################################################################
# Specify rule to clean all unwanted files from this tree. The standard
# rules delete any files with names matching *~ *.a or *.o or called core
# or tmp_make and additionally deletes any *.s files where there is a
# matching *.c or *.S file in the same directory.

clean:	cleandir
	rm -f *~ *.a *.o core tmp_make
	for FILE in *.s ; do \
		NAME=`basename $$FILE .s` ; \
		if [ -f $$NAME.c -o -f $$NAME.S ]; then \
			rm -f $$FILE ; \
		fi ; \
	done
	for DIR in */ ; do \
		if [ -f $$DIR/Makefile ]; then \
			make -C $$DIR clean ; \
		fi ; \
	done

#########################################################################
# Specify a rule to create a default configuration from any directory.

defconfig:
	@rm -f $(ELKSDIR)/.config
	@yes '' | make -C $(ELKSDIR) config

#########################################################################
# Specify a rule to configure all dependencies as required.

dep:
	sed '/^\#\#\# Dependencies:/q' < Makefile > tmp_make
	(for FILE in *.c ; do $(CC_PROTO) $$FILE ; done) >> tmp_make
	for DIR in */ ; do \
		if [ -f $$DIR/Makefile ]; then \
			make -C $$DIR dep ; \
		fi ; \
	done
	mv -f tmp_make Makefile

#########################################################################
# Specify a rule to create a separate distribution tree. The standard
# rules copy all files matching *.[1chSs] or named Makefile or README*
# to the correct directory in the distribution tree.

dist:	clean nodep distdir
	for FILE in *.1 *.c *.h *.S *.s Makefile README* ; do \
		cp -fp $$FILE $(DISTDIR)/$(RELPATH)/$$FILE ; \
	done
	for DIR in */ ; do \
		if [ -f $$DIR/Makefile ]; then \
			make -C $$DIR dist ; \
		fi ; \
	done

#########################################################################
# Specify a rule to run LINT through the C source files in this tree.

lint:
	for FILE in *.c ; do \
		$(LINT) $(LTFLAGS) -c $$FILE ; \
		echo ; \
	done
	for DIR in */ ; do
		if [ -f $$DIR/Makefile ]; then \
			make -C $$DIR lint ; \
		fi ; \
	done

#########################################################################

nodep:
	sed '/^\#\#\# Dependencies:/q' < Makefile > tmp_make
	if cmp -s Makefile tmp_make ; then \
		rm -f tmp_make ; \
	else \
		mv -f tmp_make Makefile ; \
	fi
	for DIR in */ ; do \
		if [ -f $$DIR/Makefile ]; then \
			make -C $$DIR nodep ; \
		fi ; \
	done

#########################################################################
# End of standard rules
