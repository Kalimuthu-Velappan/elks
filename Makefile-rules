#########################################################################
#                                                                       #
#     Standard rulesets for use when compiling and installing ELKS.     #
#                                                                       #
#########################################################################
#
# This file expects the following variables to have been defined before
# it is included into any other Makefile on this system:
#
#	ELKSDIR 	The relative path from the directory the Makefile
#			is in to the ELKS base directory.
#
#	ELKSSTD 	Whether to compile for ELKS or Linux. If this is
#			set to 'N' it compiles for Linux, otherwise it
#			compiles for ELKS.
#
#	CLEANDEP	Any files in the current directory that the
#			`make dep` command is dependent on.
#
#	CLEANME 	Any files in the current directory to be removed
#			by the `make clean` command that are not in the
#			standard list of files matching "*~", "*.bak",
#			"*.o", "*.map" or "*.tmp", or named "core".
#
#	DEPEND		Any files in the current directory that the
#			`make dep` command is dependent on.
#
#	DISTFILES	Any files in the current directory that are to
#			be included in a distribution made with the
#			`make dist` command that are not in the standard
#			list. This standard list consists of those files
#			NOT removed by `make clean` that match any of
#			the patterns "*.?", "*.cc", "*.html", "*.in",
#			"*.sh", "*.tk", "*.txt", "Makefile*" or "README*".
#
# No other variables should be defined before including this file.
#
#########################################################################
# State the current ELKS kernel version.

VERSION 	= 0	# (0-255)
PATCHLEVEL	= 1	# (0-255)
SUBLEVEL	= 0	# (0-255)
PRE		= 3	# (0-255)	If not a pre, comment this line.

# Specify the architecture we will use.

ARCH		= i86

# ROOT_DEV specifies the default root-device when making the image.
# This does not yet work under ELKS. See include/linuxmt/config.h to
# change the root device.

ROOT_DEV	= FLOPPY

# Specify the target for the netboot image.

TARGET_NB_IMAGE	= $(TOPDIR)/nbImage

#########################################################################
#									#
#   From here onwards, it is not normally necessary to edit this file   #
#									#
#########################################################################

# Define variables directly dependant on the current ELKS version.

VSNCODE1	= $(shell printf '0x%02X%02X%02X' \
			$(VERSION) $(PATCHLEVEL) $(SUBLEVEL))

ifeq (x$(PRE), x)

DIST		= $(shell printf '%u.%u.%u' \
			$(VERSION) $(PATCHLEVEL) $(SUBLEVEL))

VSNCODE		= $(VSNCODE1)00

else

DIST		= $(shell printf '%u.%u.%u-pre%u' \
			$(VERSION) $(PATCHLEVEL) $(SUBLEVEL) $(PRE))

VSNCODE		= $(shell printf '0x%06X%02X' $$[$(VSNCODE1)-1] $(PRE))

endif

#########################################################################
# Specify the root directory.

TOPDIR		= $(shell cd "$(ELKSDIR)" ; \
			  if [ -n "$$PWD" ]; \
				then echo $$PWD ; \
				else pwd ; \
			  fi)

#########################################################################
# Specify the various directories.

ARCH_DIR	= arch/$(ARCH)

INCDIR		= $(TOPDIR)/include

MYDIR		= $(shell pwd | sed 's¬^$(TOPDIR)¬.¬')

#########################################################################
# Specify the directory we are to create the distribution copy of this
# directory in, in such a way that no . or .. directories occur. This
# also makes this an absolute path, but that fact is not important.

DISTDIR 	= $(shell $(ELKSDIR)/scripts/setdir $(TOPDIR)/../elks-$(DIST)/$(MYDIR))

#########################################################################
# Specify the configuration shell to use.

CONFIG_SHELL	:= $(shell if [ -x "$$bash" ]; \
				then echo $$bash ; \
				else if [ -x /bin/bash ]; \
					then echo /bin/bash ; \
					else echo sh ; \
				     fi ; \
			   fi)

#########################################################################
# Specify the standard definitions to be given to ELKS programs. We use
# ASCII code 160 decimal for spaces in the date and UTS_VERSION strings
# to avoid the shell splitting them up as separate 'words'.

CCDEFS		= -DELKS_VERSION_CODE=$(VSNCODE)		\
		  -DUTS_RELEASE=\"$(DIST)\"			\
		  -D__KERNEL__

#########################################################################
# Set the target environment.

ifeq (wildcard($(ELKSDIR)/.config), $(ELKSDIR)/.config)
    MK_ARCH	= $(shell grep '^CONFIG_ARCH_' $(ELKSDIR)/.config \
			| cut -d = -f 1 | cut -d _ -f 3- | tr A-Z a-z)
    MK_CPU	= $(shell grep '^CONFIG_CPU_' $(ELKSDIR)/.config \
			| cut -d = -f 1 | cut -d _ -f 3- | tr A-Z a-z)
else
    MK_ARCH	= ibmpc
    MK_CPU	= 8086
endif

#########################################################################
# Define architecture-specific flags.

ifeq ($(MK_ARCH), ibmpc)
    ARCH_AS	=
    ARCH_CC	=
    ARCH_LD	=
endif

ifeq ($(MK_ARCH), sibo)
    ARCH_AS	=
    ARCH_CC	=
    ARCH_LD	= -D 0xC00 -H 0x480
endif

#########################################################################
# Define CPU-specific flags.

ifeq ($(MK_CPU), 8086)
    CPU_AS	= -0
    CPU_CC	= -0
    CPU_LD	= -0
endif

ifeq ($(MK_CPU), 80186)
    CPU_AS	= -1
    CPU_CC	= -0
    CPU_LD	= -0
endif

ifeq ($(MK_CPU), 80286)
    CPU_AS	= -2
    CPU_CC	= -0
    CPU_LD	= -0
endif

ifeq ($(MK_CPU), 80386)
    CPU_AS	= -3
    CPU_CC	= -3
    CPU_LD	= -3
endif

ifeq ($(MK_CPU), 80486)
    CPU_AS	= -3
    CPU_CC	= -3
    CPU_LD	= -3
endif

#########################################################################
# Export all variables.

.EXPORT_ALL_VARIABLES:

#########################################################################
# Specify the tools to use, with their flags.

ifeq ($(ELKSSTD), Y)

AR		= ar

AS		= as86
ASFLAGS 	= $(CPU_AS) $(ARCH_AS)

CC		= bcc
CFLBASE 	= -O $(CCDEFS)
CFLAGS		= $(CPU_CC) $(ARCH_CC) -i $(CFLBASE)

CPP		= $(CC) -I$(INCDIR) -E $(CCDEFS)

CC_PROTO	= gcc -I$(INCDIR) -M $(CCDEFS)

LD		= ld86
LDFLAGS 	= $(CPU_LD) -s -x

LINT		= lclint

#########################################################################
# general construction rules

.c.s:
	$(CC) $(CFLAGS) -0 -nostdinc -I$(INCDIR) -S -o $*.s $<

.s.o:
	$(AS) -0 -o $*.o $<

.S.s:
	gcc -E -traditional $(CCDEFS) -I$(INCDIR) -o $*.s $<

.c.o:
	$(CC) $(CFLAGS) -0 -I$(INCDIR) -c -o $*.o $<

endif

#########################################################################
# Default target, to allow standard targets to be included. This simply
# allows `make elks` to be called from any directory in the tree, and
# results in `make all` being called in the root directory of the tree.

elks:
	make -C $(ELKSDIR) all

#########################################################################
# Standard commands.

clean:	$(CLEANDEP)
	rm -fv *~ *.bak *.o *.map *.tmp core $(CLEANME)
	@for FILE in *.s ; do \
		BASE=`basename "$$FILE" .s` ; \
		if [ -f "$$BASE.c" -o -f "$$BASE.S" ]; then \
			echo rm -fv "$$FILE" ; \
			rm -fv "$$FILE" ; \
		fi ; \
	done
	@for DIR in */ ; do \
		if [ -f "$$DIR/Makefile" ]; then \
			make -C "$$DIR" clean ; \
		fi ; \
	done

dep:	$(DEPEND)
	@if \ls *.c > /dev/null 2>&1 ; then make mkdep ; fi
	@for DIR in */ ; do \
		if [ -f "$$DIR/Makefile" ]; then \
			make -C "$$DIR" dep ; \
		fi ; \
	done

mkdep:
	sed '/\#\#\# Dependencies/q' < Makefile > make.tmp
	@echo >> make.tmp
	@for FILE in *.c ; do \
		echo $(CC_PROTO) "$${FILE}" >> make.tmp ; \
		$(CC_PROTO) "$${FILE}" >> make.tmp ; \
		printf '\n\n' >> make.tmp ; \
	done
	@if ! diff Makefile make.tmp > /dev/null ; then \
		echo mv -fv make.tmp Makefile ; \
		mv -fv make.tmp Makefile ; \
	else \
		echo rm -f make.tmp ; \
		rm -f make.tmp ; \
	fi

nodep:
	sed '/\#\#\# Dependencies/q' < Makefile > make.tmp
	@if ! diff Makefile make.tmp > /dev/null ; then \
		echo mv -f make.tmp Makefile ; \
		mv -f make.tmp Makefile ; \
	else \
		echo rm -f make.tmp ; \
		rm -f make.tmp ; \
	fi
	@for DIR in */ ; do \
		if [ -f "$$DIR/Makefile" ]; then \
			make -C "$$DIR" nodep ; \
		fi ; \
	done

#########################################################################
# Sub-command used by the `make dist` command in the toplevel Makefile.

MKDIST	= $(shell export allow_null_glob_expansion=Y ; \
	  echo *.? *.cc *.html *.in *.png *.sh *.tk *.txt Makefile* README*)

mkdist:	
	mkdir -m 755 -p $(DISTDIR)
	cp -pf $(MKDIST) $(DISTFILES) $(DISTDIR)
	@for DIR in */ ; do \
		if [ -f "$${DIR}/Makefile" ]; then \
			make -C "$${DIR}" mkdist ; \
		fi ; \
	done

#########################################################################
# End of standard rules file.
