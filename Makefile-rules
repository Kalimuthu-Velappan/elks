# State the current ELKS kernel version.

VERSION 	= 0	# (0-255)
PATCHLEVEL	= 0	# (0-255)
SUBLEVEL	= 89	# (0-255)
PRE		= 1	# (0-255)	If not a pre, comment this line.

# Specify the architecture we will use.

ARCH		= i86

# ROOT_DEV specifies the default root-device when making the image.
# This does not yet work under ELKS. See include/linuxmt/config.h to
# change the root device.

ROOT_DEV	= FLOPPY

# Specify the target for the netboot image.

TARGET_NB_IMAGE	= $(TOPDIR)/nbImage

#########################################################################
#									#
#   From here onwards, it is not normally necessary to edit this file   #
#									#
#########################################################################

# Define variables directly dependant on the current ELKS version.

VSNCODE1	= $(shell printf '0x%02X%02X%02X' \
			$(VERSION) $(PATCHLEVEL) $(SUBLEVEL))

ifeq (x$(PRE), x)

DIST		= $(shell printf '%u.%u.%u' \
			$(VERSION) $(PATCHLEVEL) $(SUBLEVEL))

VSNCODE		= $(VSNCODE1)00

else

DIST		= $(shell printf '%u.%u.%u-pre%u' \
			$(VERSION) $(PATCHLEVEL) $(SUBLEVEL) $(PRE))

VSNCODE		= $(shell printf '0x%06X%02X' $$[$(VSNCODE1)-1] $(PRE))

endif

#########################################################################
# Specify the root directory.

TOPDIR		= $(shell cd "$(ELKSDIR)" ; \
			  if [ -n "$$PWD" ]; \
				then echo $$PWD ; \
				else pwd ; \
			  fi)

#########################################################################
# Specify the various directories.

ARCH_DIR	= arch/$(ARCH)

DISTDIR 	= $(TOPDIR)/elks-$(DIST)

INCDIR		= $(TOPDIR)/include

#########################################################################
# Specify the standard definitions to be given to ELKS programs. We use
# ASCII code 160 decimal for spaces in the date and UTS_VERSION strings
# to avoid the shell splitting them up as separate 'words'.

CCDEFS		= -DELKS_VERSION_CODE=$(VSNCODE)		\
		  -DUTS_RELEASE=\"$(DIST)\"			\
		  -D__KERNEL__

#########################################################################
# Specify the tools to use, with their flags.

AR		= ar

AS		= as86
ASFLAGS 	= -0

CC		= bcc
CFLBASE 	= $(CCDEFS) -O
CFLAGS		= $(CFLBASE) -i
CPP		= $(CC) -I$(INCDIR) -E $(CCDEFS)
CC_PROTO	= gcc -I$(INCDIR) -M $(CCDEFS)

LD		= ld86
LDFLAGS 	= -0 -s -x

LINT		= lclint

#########################################################################
# Specify the configuration shell to use.

CONFIG_SHELL	:= $(shell if [ -x "$$bash" ]; \
				then echo $$bash ; \
				else if [ -x /bin/bash ]; \
					then echo /bin/bash ; \
					else echo sh ; \
				     fi ; \
			   fi)

#########################################################################
# Export all variables.

.EXPORT_ALL_VARIABLES:

#########################################################################
# general construction rules

.c.s:
	$(CC) $(CFLAGS) -0 -nostdinc -I$(INCDIR) -S -o $*.s $<

.s.o:
	$(AS) -0 -c -o $*.o $<

.S.s:
	gcc -E -traditional $(CCDEFS) -I$(INCDIR) -o $*.s $<

.c.o:
	$(CC) $(CFLAGS) -0 -I$(INCDIR) -c -o $*.o $<

#########################################################################
# Default target, to allow standard targets to be included. This simply
# allows `make elks` to be called from any directory in the tree, and
# results in `make all` being called in the root directory of the tree.

elks:
	make -C $(ELKSDIR) all

#########################################################################
# End of standard rules file.
