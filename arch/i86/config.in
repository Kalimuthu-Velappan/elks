#
# For a description of the syntax of this configuration file,
# see the Configure script.
#
mainmenu_name "Linux ELKS Kernel Configuration"
comment 'Just accept the defaults unless you know what you are doing'

mainmenu_option next_comment
comment 'General setup'
choice 'Select system architecture'            \
       "Auto           CONFIG_ARCH_PC_AUTO     \
	SIBO           CONFIG_ARCH_SIBO        \
        PC/XT          CONFIG_ARCH_PC_XT       \
        PC/AT          CONFIG_ARCH_PC_AT       \
        Microchannel   CONFIG_ARCH_PC_MCA" CONFIG_ARCH_PC_AUTO
bool 'Support for loadable modules' CONFIG_MODULE
bool 'Support for shared libraries' CONFIG_SHLIB

if [ "$CONFIG_ARCH_SIBO" != "y" ]; then
bool 'Switch COMPAQ DeskPro into fast mode' CONFIG_COMPAQ_FAST

mainmenu_option next_comment
comment 'ROM-CODE kernel-loader'
bool 'Build kernel as ROM-bootable' CONFIG_ROMCODE
if [ "$CONFIG_ROMCODE" = "y" ]; then
   choice 'Select processor architecture'            \
          "8086,80186     ROM_IS86\
           80286          ROM_IS286   \
           80386          ROM_IS386   \
           80486_or_more  ROM_IS486" 8086,80186
   bool 'System has no FPU'                               ROM_NOFPU      y
   bool 'System has no keybordbios (if no BIOS-Int 16h)'  ROM_NOKBDBIOS  y
   bool 'System has no VGA-adapter'                       ROM_NOVGA      n
   bool 'System has no PS/2 pointing device'              ROM_NOPS2MOUSE y
   bool 'System has no hard disk (in 0.76 should be "y")' ROM_NOHDD      y
   bool 'System has no floppy disk'                       ROM_NOFLOPPY
   bool 'Get extended memory size via BIOS-Int 15'        __ROM_EXTMEM   n
   if [ "$__ROM_EXTMEM" != "y" ]; then
      int  'Extended memory size in kB'                   ROM_EXTMEMSIZE 0
   fi
   bool 'Get fontinfo via CRT-BIOS (40h:85h)'             __ROM_VIDEO_HOC y
   if [ "$__ROM_VIDEO_HOC" != "y" ]; then
      int  'High of character in lines'                  ROM_VIDEO_HIGHOFCHARACTER 8
      int  'Lines per page'                              ROM_HIGH_OF_CRT 25
   fi

   comment 'absolute segment location of target system'
   hex 'Codesegment for setup.S      (SEG, size ca. 0x60 ROM)'  ROM_SETUP_CODE     0xe000
   hex 'Codesegment kernel           (SEG, ca. 64k ROM)'        ROM_KERNEL_CODE    0xe060
   hex 'Datasegment for setup.S      (SEG, size ca. 0x20 RAM)'  ROM_SETUP_DATA     0x0060
   hex 'Datasegment (IRQ-Scheduler)  (SEG, size ca. 0x10 RAM)'  ROM_KERNEL_IRQDATA 0x0080
   hex 'Datasegment (DATA+BSS+STACK) (SEG, ca. 64k RAM)'        ROM_KERNEL_DATA    0x0090

   comment 'Information for ROM-Image generator'
   hex 'Startaddress of ROM (for offset in image-file)'  ROM_BASIS       0xe000
   int 'Area with BIOS Checksum in kbytes (normally 64)' ROM_CHECKSUM_SIZE 64
   bool 'Make image-file bootable by reset'              ROM_RESET_VEC   n
   if [ "$ROM_RESET_VEC" = "y" ]; then
     hex 'Address jumped after reset (offset in image)'  ROM_RESET_ADDR    0x0003
     bool 'Add startup module to image (BIOS-functions)' ROM_ADD_BIOS      n
     if [ "$ROM_ADD_BIOS" = "y" ]; then
       string 'Name of module'                           ROM_EXT_MOD1      "bios/bioscode.bin"
       hex    'Module codesegment address'               ROM_EXT_MOD1_ADDR 0xf000
     fi
   fi
   bool 'Use EPROM-Simulator after make'                 ROM_E_SIMULATOR   n
   if [ "$ROM_E_SIMULATOR" = "y" ]; then
       string 'Programcall'                              ROM_E_SIM_CALL    "/usr/bin/simu -t18 Image"
   fi


   comment 'Generate debugcode and information'
   bool 'ROM-CODE debug infos'                             ROM_CODE_DEBUG
fi
endmenu


if [ "$CONFIG_ROMCODE" = "y" ]; then
  mainmenu_option next_comment
    comment 'ROM-CODE kernel-configuration'

    bool 'Use IRQ-Mask of 8259 at boottime as default'      ROM_USE_ORG_INTMASK n
#    bool 'Different Systemclock at Timer 8253'              ROM_CONFIG_8253  n
#    if [ "$ROM_CONFIG_8253" = "y" ]; then
#       hex 'Initvalue for Timerchanel 0 (for 10 ms)'        ROM_8253_100HZ   0x2e9c
#    fi
    int 'Ticks for BogoMIPS (0 = check at boottime)'        ROM_BOGOMIPS 0
    bool 'NO Floppycount at 40:10 use INT13.08'             ROM_GETFLOPPY_VIA_INT13 n 
    bool 'Dont seek to get Floppy information (use I13.8)'  GET_DISKPARAM_BY_INT13_NO_SEEK y
#    bool 'CHM-BIOSerweiterungen für Debugger'               CHM_BIOS y

  endmenu
fi


  source arch/i86/286pmode/Config.in
fi

mainmenu_option next_comment
comment 'Kernel hacking'
bool 'Strace' CONFIG_STRACE
bool 'Optimise for size rather than speed' CONFIG_OPT_SMALL
endmenu

mainmenu_option next_comment
comment 'Embedded systems'
comment 'Currently unimplemented features for use in embedded systems'
bool 'Remove filesystem code' CONFIG_NOFS
bool 'Exec code from ROM' CONFIG_EXEC_ROM
endmenu
endmenu 

# The next lines are okay as we are already in arch/i86
source arch/i86/drivers/char/Config.in
if [ "$CONFIG_NOFS" = "n" ]; then
	source arch/i86/drivers/block/Config.in
	source fs/Config.in
fi
source net/Config.in



