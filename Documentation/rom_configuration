Configuration for OS-Loader
============================

Most options are made to reduce the size of code and (constant) data.
If an option not defined as absent, a test for this device is performed.

An embedded 8086 system you can use without full IBM BIOS. So al lot of 
BIOS variable and BIOS-function (INTxx) are not implemented. In this 
cases you must perform the results directly.

The bootsector code isn't used for ROM code. setup.S made the full
OS/loader function.



'Build kernel as ROM-bootable'    CONFIG_ROMCODE 
-------------------------------------------------

  Reduces the code and data size. Only the result strings for the
  specified group included to the code.   
   
   
'System havent FPU'               ROM_NOFPU   
--------------------------------------------

  Most systems haven't FPU. Reduces the code size.


'System havent keyboardbios (if no BIOS-Int 16h)'    ROM_NOKBDBIOS 
------------------------------------------------------------------

  Systems with SIO console doesn't need a keyboard BIOS
  

'System havent VGA-adapter'       ROM_NOVGA   
--------------------------------------------
  
  No search to VGA
  
  
'System havent PS/2 pointing device'   ROM_NOPS2MOUSE 
------------------------------------------------------

  No search to PS/2 mouse. The variable is placed to the address 01ff 
  in setup segment. This variable generates a 500 bytes memory hole. 
  The device should disabled until the address is fixed.


'System havent hard disk (in 0.76 should be "y")' ROM_NOHDD    
------------------------------------------------------------
  Do not init a hard disk. A comment in 0.76 says you should disable
  this option.


'System havent floppy disk'       ROM_NOFLOPPY
-----------------------------------------------
   Init floppy. The kernel code is in ROM, so you doesn't need this.
   

'Get extended memory size via BIOS-Int 15'  __ROM_EXTMEM  
'Extended memory size in kB'                ROM_EXTMEMSIZE
-----------------------------------------------------------

  The BIOS function give the size of extended memory (above 1 MB)
  You can tell the size directly or ask the BIOS.

 
'Get fontinfo via CRT-BIOS (40h:85h)'    __ROM_VIDEO_HOC y
'High of character in lines'             ROM_VIDEO_HIGHOFCHARACTER 
'Lines per page'                         ROM_HIGH_OF_CRT
-------------------------------------------------------------------
   
   The BIOS placed font information in the BIOS data space. The normal
   values are 8 and 25.



--------------------------------------------------
'absolute segment location of target system'
--------------------------------------------------
-
-  In this area you specify the location of all segments. The code is
-  always placed in the ROM are, the data (DATA and BSS) in RAM.
   
   
'Codesegment for setup.S      (SEG, size ca. 0x60 ROM)'  ROM_SETUP_CODE 
------------------------------------------------------------------------
   The OS/loader setup.S  *must* place at start of a 2 kB segment, therefore
   the BIOS looks only at this position after user ROMs.


'Codesegment kernel           (SEG, ca. 64k ROM)'        ROM_KERNEL_CODE
-------------------------------------------------------------------------
   Position for kernel code (including kernel DATA)
   
   
'Datasegment for setup.S      (SEG, size ca. 0x10 RAM)'  ROM_SETUP_DATA
------------------------------------------------------------------------
   Position where the computer configuration infos stored.
   
   
'Datasegment (IRQ-Scheduler)  (SEG, size: ca. 0x5 RAM)'  ROM_KERNEL_IRQDATA
----------------------------------------------------------------------------
   The ELKS kernel used in original CS variables in some routines. 
   In ROM case this was fixed by moving this into this special RAM segment.
   

'Datasegment (DATA+BSS+STACK) (SEG, ca. 64k RAM)'        ROM_KERNEL_DATA
-------------------------------------------------------------------------
   To this area the kernel DATA is copied form ROM (kernel CODE).
   
   

---------------------------------------
'Information for ROM-Image generator'
---------------------------------------
-
-  The images of kernel, setup and (if you want) the power on code (a small 
-  BIOS) must merged to one big image for the PROM. You also can add a 
-  reset vector (at f000:fff0) in the image.


'Startaddress of ROM (for offset in image-file)'         ROM_BASIS
--------------------------------------------------------------------
  
   Basis of the ROM image. Normally 0xf000 for 64 k PROMS 
   (0xe000 for 128 k PROMS).
   This address is used as offset for the next addresses
   

'Area with BIOS Checksum in kbytes (normally 64)'  ROM_CHECKSUM_SIZE
-----------------------------------------------------------------------------
   
   The size should response to the size of setup und kernel.
   Some BIOSes have problems is less then 4 kB. Maximum 128 kB


'Make image-file bootable by reset'             ROM_RESET_VEC   
'Address jumped after reset (offset in image)'  ROM_RESET_ADDR  
----------------------------------------------------------------

   If you say 'yes' a reset vector is added to the image. 
   jmp far ROM_BASIS:ROM_RESET_ADDR
   Normally the value is 0003 (0..2 is the BIOS identifier)
   

'Add startup module to image (BIOS-functions)' ROM_ADD_BIOS 
'Name of module'                               ROM_EXT_MOD1 
'Module codesegment address'                   ROM_EXT_MOD1_ADDR 
------------------------------------------------------------------

   In bootable images (ROM_RESET_VEC = y) you can placed a third image file
   (for example the power on code with BIOS). ROM_EXT_MOD1 is the name
   of the binary, ROM_EXT_MOD1_ADDR the offset in the destination image 
   (0xf000 placed an image at ff000 n a 64 k ROM)


'Use EPROM-Simulator after make'        ROM_E_SIMULATOR   
'Programcall'                           ROM_E_SIM_CALL  
--------------------------------------------------------
   
   After successful compiling you can call a program. For example for
   copy the image in an EPROM emulator.



'Generate debugcode and information'
'ROM-CODE debug infos'                  ROM_CODE_DEBUG
------------------------------------------------------------

   Additional Information from setup.S
   

-----------------------------------------------------------
The next information only for the kernel. Some information from
the OS/loader section the kernel needs too (ROM_KERNEL_DATA, ...)
Both (setup and kernel) should recompile if a value in the 
OS/loader section is changed.
-----------------------------------------------------------





Configuration of ROM-Kernel
============================

This section include the option used only in the kernel.

    
'Use IRQ-Mask of 8259 at boottime as default'      ROM_USE_ORG_INTMASK 
------------------------------------------------------------------------

   Normally the kernel disables all interrupts at boot time. If you use
   a ROM-debugger connected via SIO its ugly if the kernel disable you.
   If you say yes, the interrupt mask at boot time is used as default.
   
   
   
'Different system clock at Timer 8253'         ROM_CONFIG_8253  
'Initvalue for timer chanel 0 (for 10 ms)'     ROM_8253_100HZ   
--------------------------------------------------------------------

   If you system have an other input clock for timer 0 then the original
   IBM PC you can define here the correct value to get a 10 ms (100 Hz) 
   clock for the scheduler interrupt (IRQ 0).


'Ticks for BogoMIPS (0 = check at boot time)'  ROM_BOGOMIPS
------------------------------------------------------------

   A 8088 for example need up to 15 sec for calculating his bogomips but 
   only 5 sec for booting the kernel. If you know your speed you can use 
   this define.


'NO Floppycount at 40:10 use INT13.08'        ROM_GETFLOPPY_VIA_INT13 
-----------------------------------------------------------------------
   
   If no BIOS data at 40h, its possible to get the Flopyinformation via INT 13.
   (Only if you use BIOS FDD)


'Dont seek to get Floppy information (use I13.8)'  GET_DISKPARAM_BY_INT13_NO_SEEK 
----------------------------------------------------------------------------------

   If you haven't real disks and the information of INT 13 function 8 are consistent,
   it's more faster to get the information via this interrupt.



'CHM-BIOSerweiterungen für Debugger'               CHM_BIOS 
-------------------------------------------------------------
   This added only some breakpoints and prints in the kernel code
   (the function should remove if the ROM_CODE in a stable state)



Christian Mardmöller (chm@kdt.de)
10/1999


