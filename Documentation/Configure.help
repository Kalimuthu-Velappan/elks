# Linux ELKS Kernel Configuration
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# General Setup
# ~~~~~~~~~~~~~

Auto detect PC architecture
CONFIG_ARCH_AUTO
  Use this option to specify the architecture the kernel will 
  run on AT (PC/AT), XT (PC/XT) or auto detect at boot time (Auto).

Support AT architecture only
CONFIG_AT
  Use this option to build a smaller kernel that only runs on AT type systems.

Support XT architecture only
CONFIG_XT
  Use this option to build a smaller kernel that only runs on XT type systems.

Support loadable modules
CONFIG_MODULE
  Saying yes includes experimental support for loadable modules.

Support shared libraries
CONFIG_SHLIB
  Saying yes includes experimental support for shared libraries.

# Model-specific options
# ~~~~~~~~~~~~~~~~~~~~~~

Switch COMPAQ DeskPro into fast mode
CONFIG_COMPAQ_FAST
  Saying yes includes code to switch COMPAQ Deskpro machines that
  default to slow speed, into fast speed.

# ROM-CODE kernel-loader
#~~~~~~~~~~~~~~~~~~~~~~~

Build kernel as ROM-bootable
CONFIG_ROMCODE
  Saying yes will allow the kernel to be bootable from ROM.

Select processor architecture
ROM_IS86
  Select the target CPU (default 8086,80186).

Support 286
ROM_IS286
  Build for the 286 CPU

Support 386
ROM_IS386
  Build for the 386 CPU

Support 486 or higher
ROM_IS486
  Build for the 486 or higher CPU's

System has no FPU
ROM_NOFPU
  Saying yes will compile the code without FPU support.

System has no keyboardbios (if no BIOS-Int 16h)
ROM_NOKBDBIOS
  Saying yes will compile the code for systems that do not support
  Int-16 in the BIOS. 

System has no VGA-adapter
ROM_NOVGA
  Saying yes will compile the code without VGA compatability,
   but will still allow EGA, CGA etc.

System has no PS/2 pointing device
ROM_NOPS2MOUSE
  Saying yes will compile the code without PS/2 pointing device support.

System has no hard disk (in 0.76 should be "y")
ROM_NOHDD
  Saying yes will compile the code without hard disk support 
  (in ELKS v0.76 this should always be yes)

System has no floppy disk
ROM_NOFLOPPY
  Saying yes will compile the code without floppy support.

Get extended memory size via BIOS-Int 15
__ROM_EXTMEM
  Saying yes will allow ELKS to get the extended memory size 
  by calling BIOS Int 15 (function 88).

Extended memory size in kB
ROM_EXTMEMSIZE
  Specify howmany K of extended memory is in the target system.

Get fontinfo via CRT-BIOS (40h:85h)
__ROM_VIDEO_HOC
  Saying yes will get the System font info using the CRT-BIOS at 40h:85h.

High of character in lines
ROM_VIDEO_HIGHOFCHARACTER
  Specify the maximan height of a charactor on the display in pixels.

Lines per page
ROM_HIGH_OF_CRT
  Specify the number of lines that can be displayed on the screen.

# absolute segment
#~~~~~~~~~~~~~~~~~

Codesegment for setup.S      (SEG, size ca. 0x60 ROM)
ROM_SETUP_CODE
  Code segment location for the setup code when programmed into a ROM.
  This is usually the base segment address of the ROM.

Codesegment kernel           (SEG, ca. 64k ROM)
ROM_KERNEL_CODE
  Code segment location for the kernel code when programmed into a ROM.
  This is usually the base segment address of the ROM + 0x60.

Datasegment for setup.S      (SEG, size ca. 0x20 RAM)
ROM_SETUP_DATA
  Segment location in RAM where the setup code keeps the values it
  is going to pass to the kernel.

Datasegment (IRQ-Scheduler)  (SEG, size ca. 0x10 RAM)
ROM_KERNEL_IRQDATA
  Segment location of an absolute area of RAM where the kernel
  stores certain variables that it must be able to access
  when it does not know where its data segment is.

Datasegment (DATA+BSS+STACK) (SEG, ca. 64k RAM)
ROM_KERNEL_DATA
  Segment location of the kernels data segment, used only when the
  kernel image is in ROM.

# Info for ROM-IMG Generator
#~~~~~~~~~~~~~~~~~~~~~~~~~~~

Start address of ROM (for offset in image-file)
ROM_BASIS
  Set the memory address of the executable part of the code in HEX (0x????),
  this is also used to set the offset in the ROM image file.

Area with BIOS Checksum in kbytes (normally 64)
ROM_CHECKSUM_SIZE
  Size of the ROM image to be prepared.
  This value is stored in the ROM header,
  and the whole ROM must checksum to zero.

Make image-file bootable by reset
ROM_RESET_VEC
  Saying yes will allow the image file to boot via a warm boot sequence.

Address jumped to after reset (offset in image)
ROM_RESET_ADDR
  The offset in the image-file that should be jumped to for a warm boot.

Add startup module to image (BIOS-functions)
ROM_ADD_BIOS
  Saying yes will allow you to add a BIOS to the image-file.

Name of module
ROM_EXT_MOD1
  The location of the BIOS image to add to the ELKS image-file.

Module codesegment address
ROM_EXT_MOD1_ADDR
  The memory address to jump to after BIOS functions have ran (See ROM_BASIS).

Use EPROM-Simulator after make
ROM_E_SIMULATOR
  Saying yes will load an EPROM simulator/emulator after make has finished.

# Cannot realy create help for a string var
Programcall
ROM_E_SIM_CALL
  The location of the executable to run for the EPROM simulator/emulator,
  including command line perameters etc.

# Generate debug code
#~~~~~~~~~~~~~~~~~~~~

ROM-CODE debug infos
ROM_CODE_DEBUG
  Saying yes will compile the ROM image with all debug information turned on.

# ROM code conf
#~~~~~~~~~~~~~~

Use IRQ-Mask of 8259 at boot time as default
ROM_USE_ORG_INTMASK
  Saying yes will force the irq system to read 
  in the original interrupt mask befor it starts sorting
  out interrupts. 
  By default the kernel disables all interrupts.
  This should only be used by kernel hackers.

Ticks for BogoMIPS (0 = check at boot time)
ROM_BOGOMIPS
  Enter the number of ticks for the BogoMIPS (integer)

NO Floppy count at 40:10 use INT13.08
ROM_GETFLOPPY_VIA_INT13
  Saying yes will get the number of floppy drive via INT-13 function 08,
  (get drive perameters (on PC/XT only works on Hard Drives)).

Dont seek to get Floppy information (use I13.8)
GET_DISKPARAM_BY_INT13_NO_SEEK
  Saying yes will explicitly tell ELKS not to use Int13.08 to get 
  Floppy information (Int 13.08 doesn't work on PC/XT floppy drives).

# 286 Protected Mode support
# ~~~~~~~~~~~~~~~~~~~~~~~~~~

# Support for 286+ features

286 Protected Mode support
CONFIG_286PMODE
  Include support for 286 Protected Mode. Experimental. Use at your own
  risk. (This option will probably not interact well with the BIOS disk
  drivers)

# Support for 386+ features

Support more than 16 Megs of RAM
CONFIG_386RAM
  Add support for RAM beyond 16 megs on 386+ systems. Currently
  nonexistant.

# Kernel hacking
# ~~~~~~~~~~~~~~

Strace
CONFIG_STRACE
  Strace displays a trace of all system calls made to the kernel. Only
  kernel hackers need this option.

Optimise for size rather than speed
CONFIG_OPT_SMALL
  Where two versions of a function exist this will cause the smaller
  version rather than the faster version to be included.

# Embedded systems
# ~~~~~~~~~~~~~~~~

Remove filesystem code
CONFIG_NOFS
  Remove the filesystem support for small embedded systems with no block
  devices.

Exec code from ROM
CONFIG_EXEC_ROM
  Add support for executing user processes in place from an image in ROM.
  Can be used even if no filesystem code is included.
  ~~~~~~~~~~~~CURRENTLY UNIMPLEMENTED~~~~~~~~~~~~~~~~~

# Console display support
# ~~~~~~~~~~~~~~~~~~~~~~~

Direct console writes
CONFIG_CONSOLE_DIRECT
  A direct console driver. This is currently the only console driver
  available for ELKS.

Direct console VT52 emulation
CONFIG_DCON_VT52
  Saying no removes some of the intelligent features from the console 
  code leaving a dumb text console which is much smaller.

Direct console ANSI emulation
CONFIG_DCON_ANSI
  Provide direct console support for ANSI (VT-102) terminals.

Use ANSI codes in printk()
CONFIG_DCON_ANSI_PRINTK
  When the kernel reports something using printk(), the reports will
  be coloured.

BIOS console writes
CONFIG_CONSOLE_BIOS
  The newly implemented BIOS based console driver.

BIOS console VT-52 emulation
CONFIG_BIOS_VT52
  This enables the use of VT-52 codes when using the BIOS console
  driver.

Serial console writes
CONFIG_CONSOLE_SERIAL
  The serial console driver. Currently minimal support for console output over
  a serial line.

# Keyboard support
# ~~~~~~~~~~~~~~~~

Use full keymap layout names
CONFIG_KEYMAP_FULL
  This option does not directly affect the code produced, but instead
  specifies whether to select the keyboard layout by abbreviated name
  (default, recommended for 'make config') or full name (recommended
  for 'make menuconfig'). Exactly the same options are available on
  each setting, they just have different names and occur in a different
  order.

Select XT keyboard support for American (US) keyboards
CONFIG_DEFAULT_KEYMAP
  This option specifies that support be provided for XT keyboards with
  the American key layout. There are no dead keys with this layout.

Select XT keyboard support for Belgian (BE) keyboards
CONFIG_BE_KEYMAP
  This option specifies that support be provided for XT keyboards with
  the Belgian key layout and associated dead keys.

Select XT keyboard support for British (UK) keyboards
CONFIG_UK_KEYMAP
  This option specifies that support be provided for XT keyboards with
  the British key layout. There are no dead keys with this layout.

Select XT keyboard support for French (FR) keyboards
CONFIG_FR_KEYMAP
  This option specifies that support be provided for XT keyboards with
  the French key layout and associated dead keys.

Select XT keyboard support for German (DE) keyboards
CONFIG_DE_KEYMAP
  This option specifies that support be provided for XT keyboards with
  the German key layout and associated dead keys.

Select XT keyboard support for Spanish (ES) keyboards
CONFIG_ES_KEYMAP
  This option specifies that support be provided for XT keyboards with
  the Spanish key layout and associated dead keys.

# Character devices
# ~~~~~~~~~~~~~~~~~

Enable memory devices
CONFIG_CHAR_DEV_MEM
  Saying yes include support for the various memory character devices.
  Currently only mem, kmem, zero, null and full are supported.

Enable standard parallel (printer) ports
CONFIG_CHAR_DEV_LP
  Include support for parallel port devices. Currently under development.
  Please test.

Enable standard serial ports
CONFIG_CHAR_DEV_RS
  Include support for serial port devices. Currently under development. Please
  test.

Enable meta device driver
CONFIG_DEV_META
  Include meta driver to support users space device drivers.

# Block devices
# ~~~~~~~~~~~~~

BIOS block device support
CONFIG_BLK_DEV_BIOS
  Device driver that allows access to floppy and hard drives through
  BIOS. Currently required.

BIOS Floppy Drive support
CONFIG_BLK_DEV_BFD
  Option to allow floppy code to be left out of BIOS device driver.

BIOD Hard Drive support
CONFIG_BLK_DEV_BHD
  Option to allow HDD code to be left out of BIOS device driver.

Normal Floppy Disk support
CONFIG_BLK_DEV_FD
  Device driver that provides direct support for floppy drives.
  Currently does not work.

Normal Hard Disk support
CONFIG_BLK_DEV_HD
  Device driver that provides direct access to IDE hard disks by Blaz
  Antonic. Currently not tested. Use at you own risk.

RAM Drive support
CONFIG_BLK_DEV_RAM
  Support for a RAM disk device driver which allows up to 8 64K ram
  drives to be implemented. Not very useful, but can be adapted to make use
  of EMS cards etc.

Old XT Hard Disk support
CONFIG_BLK_DEV_XD
  None existant device driver.

Character access to block devices
CONFIG_BLK_DEV_CHAR
  Used to create and check filesystems, and by fdisk. Recommended.

# File systems
# ~~~~~~~~~~~~

# Select available file systems

Minix file system support
CONFIG_MINIX_FS
  Support for the basic Minix filesystem. The only currently working 
  filesystem. Until another filesystem is working this is required.

ELKS file system support
CONFIG_ELKSFS_FS
  Support for the new ELKSFS native fs. Includes Minix fs emulation.

MS-DOS file system support
CONFIG_MSDOS_FS
  Support for standard MS-DOS style partitions. 
  ~~~~~~~~~~~~~~~~Currently non-existant~~~~~~~~~~~~~~
#
Include VFAT style long name support
CONFIG_VFAT_FS
  Extension to standard MS-DOS fs support to permit Win95 style long
  file names. 
  ~~~~~~~~~~~~~~~~Currently non-existant~~~~~~~~~~~~~

ROM file system support
CONFIG_ROMFS_FS
  Incomplete support for the Read Only filesystem.

Full VFS support
CONFIG_FULL_VFS
  If you say no to this then the vfs will only support one filesystem 
  type. You do not need to say yes currently as only minixfs is
  available.
  
Inter-process pipe support
CONFIG_PIPE
  Include support for standard UNIX inter-process pipes.

Make all file systems read-only
CONFIG_FS_RO
  Saying yes this option makes all access to the filesystem read only.
  Support for system calls that modify the filesystem is removed. This
  option allows a considerable amount of code space to be saved, thus
  allowing other features into the kernel.

# Executable file formats
# ~~~~~~~~~~~~~~~~~~~~~~~

Minix file format
CONFIG_EXEC_MINIX
  This lets you run Minix binaries compiled with bcc. This is the only
  real format allowed at the moment. 
  ~~~~~~~~~~~~~~~~~~~Required~~~~~~~~~~~~~~~~~~

MSDOS (EXE) file format
CONFIG_EXEC_MSDOS
  This lets you run MSDOS .EXE files under ELKS. This support is VERY
  ALPHA at the moment, and may not work. Use with caution. ie. If you
  compile this in, and something breaks, then remove it, and try again.
  In particluar, you might find you can't run any programs, including
  init and login.

# Networking support
# ~~~~~~~~~~~~~~~~~~

Socket support
CONFIG_SOCKET
  Include support for BSD style socket system calls. Currently under
  development.

UNIX sockets
CONFIG_UNIX
  Include support for AF_UNIX sockets. Currently under development.

NANO sockets
CONFIG_NANO
  Include support for experimental AF_NANO sockets. Currently under development.

CONFIG_INET
  Include support for AF_INET TCP/IP sockets.

Only support client sockets (MUST)
CONFIG_SOCK_CLIENTONLY
  Only include support for outgoing connections. Currently the only
  type supported.

Only support STREAM type sockets (MUST)
CONFIG_SOCK_STREAMONLY
  Only include support for STREAM type socket connections. Currently
  the only type supported.

# EOF


