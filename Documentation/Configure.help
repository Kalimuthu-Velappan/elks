# Linux ELKS Kernel Configuration
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Advanced - for Developers and Hackers only
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Prompt for development and/or incomplete code/drivers
CONFIG_EXPERIMENTAL
  Some of the various things that ELKS supports (such as network drivers,
  file systems, network protocols, etc.) can be in a state of development
  where the functionality, stability, or level of testing is not yet high
  enough for general use. This is usually known as the "alpha-test" phase
  amongst developers. If a feature is currently in alpha-test, then the
  developers usually discourage uninformed widespread use of this feature
  by the general public to avoid "Why doesn't this work?" type email
  messages.

  However, active testing and use of these systems is welcomed. Just be
  aware that it may not meet the normal level of reliability or it may
  fail to work in some special cases. Detailed bug reports from people
  familiar with the kernel internals are usually welcomed by developers.

  Unless you intend to help test and develop a feature or driver that
  falls into this category, or you have a situation that requires using
  these features, you should probably say N here, which will cause the
  configure script to present you with fewer choices. If you say Y here,
  you will be offered the choice of using features or drivers that are
  currently considered to be in the alpha-test phase.

  Just say N and live in peace.

Prompt for obsolete drivers
CONFIG_OBSOLETE
  Some of the drivers that ELKS supports have been superceded by later
  drivers with more general support, but have been left in the source
  tree for various reasons. However, the kernel developers discourage
  use of the obsolete drivers, at least partly because they are likely
  to vanish without further warning in a forthcoming kernel release.

  Just say N and live in peace.

Prompt for unimplemented options
CONFIG_NOT_YET
  In several cases, options are included in the ELKS configuration tree
  that have no corresponding code in the source tree, usually as a result
  of planned development that has yet to take place. Whilst playing with
  these options will not damage the compiled kernel in any way, neither
  will it do anything constructive at this time.

  Just say N and live in peace.

# Architecture selection
# ~~~~~~~~~~~~~~~~~~~~~~

Auto-detect architecture
CONFIG_ARCH_AUTO
  Use this option to specify the architecture the kernel will run on. The
  supported options are:

	Auto	Automatically detect at boot time.

	IBM-PC	Computers compatible with one of the IBM PC range.

	SIBO	The SIBO range of computers.

Auto detect PC architecture
CONFIG_PC_AUTO
  Use this option to specify the architecture the kernel will run on. The
  supported options are:

	Auto	Automatically detect at boot time.

	MCA	Computers based on IBM's MicroChannel Architecture.

	PC/AT	Computers based on the 80286 processor that are compatible
		with the IBM PC/AT computer.

	PC/XT	Computers based on the 8088 or 8086 processor that are
		compatible with the IBM PC/XT computer.

Support loadable modules
CONFIG_MODULE
  Saying yes includes experimental support for loadable modules.

Support shared libraries
CONFIG_SHLIB
  Saying yes includes experimental support for shared libraries.

# Model-specific options
# ~~~~~~~~~~~~~~~~~~~~~~

Switch COMPAQ DeskPro into fast mode
CONFIG_COMPAQ_FAST
  Saying yes includes code to switch COMPAQ Deskpro machines that default
  to slow speed to fast speed.

# ROM code kernel loader
# ~~~~~~~~~~~~~~~~~~~~~~

Build kernel as ROM-bootable
CONFIG_ROMCODE
  Saying yes will allow the kernel to be programmed into an EPROM for
  use as a replacement boot ROM.

Select the processor architecture
CONFIG_CPU_8086
  Select the target processor for which this kernel image is to be
  built. The available options are:

	8086	The 8086 and 8088 processors.		(Default)

	80186	The 80186 and 80188 processors.

	80286	The 80286 processor.

	80386	The 80386 processor.

	80486+	The 80486 and later processors.

System has no maths coprocessor.
CONFIG_HW_NO_FPU
  Saying yes will compile the code for use in systems without a
  maths coprocessor.

System has no keyboard BIOS support.
CONFIG_HW_NO_KEYBOARD_BIOS
  Saying yes will compile the code for systems that do not support
  the Keyboard BIOS interrupt 16.

System has no VGA video adapter
CONFIG_HW_NO_VGA
  Saying yes will compile the code without support for VGA video
  adapters, but will still allow use on systems with MDA, CGA or
  EGA adapters.

System has no PS/2 pointing device
CONFIG_HW_NO_PS2_MOUSE
  Saying yes will compile the code without PS/2 pointing device
  support.

System has no hard disk (in 0.76 should be "y")
CONFIG_HW_NO_HARD_DRIVE
  Saying yes will compile the code without hard disk support 
  (in ELKS v0.76 this should always be yes)

System has no floppy disk
CONFIG_HW_NO_FLOPPY_DRIVE
  Saying yes will compile the code without floppy support.

Get extended memory size via BIOS-Int 15
CONFIG_MEM_EXTENDED_MEMORY
  Saying yes will allow ELKS to get the extended memory size 
  by calling BIOS Int 15 (function 88).

Extended memory size in kB
CONFIG_MEM_EXTENDED_MEMORY_SIZE
  Specify howmany K of extended memory is in the target system.

Get fontinfo via CRT-BIOS (40h:85h)
CONFIG_HW_VIDEO_HOC
  Saying yes will get the System font info using the CRT-BIOS at
  40h:85h.

High of character in lines
ROM_VIDEO_HIGHOFCHARACTER
  Specify the maximan height of a charactor on the display in
  pixels.

Lines per page
CONFIG_HW_VIDEO_LINES_PER_SCREEN
  Specify the number of lines that can be displayed on the screen.

# Absolute segment
# ~~~~~~~~~~~~~~~~

Codesegment for setup.S      (SEG, size ca. 0x60 ROM)
CONFIG_ROM_SETUP_CODE
  Code segment location for the setup code when programmed into a ROM.
  This is usually the base segment address of the ROM.

Codesegment kernel           (SEG, ca. 64k ROM)
CONFIG_ROM_KERNEL_CODE
  Code segment location for the kernel code when programmed into a ROM.
  This is usually the base segment address of the ROM + 0x60.

Datasegment for setup.S      (SEG, size ca. 0x20 RAM)
CONFIG_ROM_SETUP_DATA
  Segment location in RAM where the setup code keeps the values it
  is going to pass to the kernel.

Datasegment (IRQ-Scheduler)  (SEG, size ca. 0x10 RAM)
CONFIG_ROM_IRQ_DATA
  Segment location of an absolute area of RAM where the kernel
  stores certain variables that it must be able to access
  when it does not know where its data segment is.

Datasegment (DATA+BSS+STACK) (SEG, ca. 64k RAM)
CONFIG_ROM_KERNEL_DATA
  Segment location of the kernels data segment, used only when the
  kernel image is in ROM.

# Information for ROM image generator
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Start address of ROM (for offset in image-file)
CONFIG_ROM_BASE
  Set the memory address of the executable part of the code in HEX (0x????),
  this is also used to set the offset in the ROM image file.

Area with BIOS Checksum in kbytes (normally 64)
CONFIG_ROM_CHECKSUM_SIZE
  Size of the ROM image to be prepared.
  This value is stored in the ROM header,
  and the whole ROM must checksum to zero.

Make image-file bootable by reset
CONFIG_ROM_BOOTABLE_BY_RESET
  Saying yes will allow the image file to boot via a warm boot sequence.

Address jumped to after reset (offset in image)
CONFIG_ROM_RESET_ADDRESS
  The offset in the image-file that should be jumped to for a warm boot.

Add startup module to image (BIOS-functions)
CONFIG_ROM_ADD_BIOS_IMAGE
  Saying yes will allow you to add a BIOS to the image-file.

Name of module
CONFIG_ROM_BIOS_MODULE
  The location of the BIOS image to add to the ELKS image-file.

Module codesegment address
CONFIG_ROM_BIOS_MODULE_ADDR
  The memory address to jump to after BIOS functions have ran (See CONFIG_ROM_BASE).

Use EPROM-Simulator after make
CONFIG_ROM_USE_SIMULATOR
  Saying yes will load an EPROM simulator/emulator after make has finished.

# Cannot realy create help for a string var
Programcall
CONFIG_ROM_SIMULATOR_PROGRAM
  The location of the executable to run for the EPROM simulator/emulator,
  including command line perameters etc.

# Generate debug code
# ~~~~~~~~~~~~~~~~~~~

ROM-CODE debug infos
CONFIG_ROM_DEBUG
  Saying yes will compile the ROM image with all debug information turned on.

# ROM code configuration
# ~~~~~~~~~~~~~~~~~~~~~~

Use IRQ-Mask of 8259 at boot time as default
CONFIG_HW_259_USE_ORIGINAL_MASK
  Saying yes will force the irq system to read 
  in the original interrupt mask befor it starts sorting
  out interrupts. 
  By default the kernel disables all interrupts.
  This should only be used by kernel hackers.

Ticks for BogoMIPS (0 = check at boot time)
CONFIG_BOGOMIPS
  Enter the number of ticks for the BogoMIPS (integer)

NO Floppy count at 40:10 use INT13.08
CONFIG_HW_USE_INT13_FOR_FLOPPY
  Saying yes will get the number of floppy drive via INT-13 function 08,
  (get drive perameters (on PC/XT only works on Hard Drives)).

Dont seek to get Floppy information (use I13.8)
CONFIG_HW_NO_SEEK_FOR_FLOPPY
  Saying yes will explicitly tell ELKS not to use Int13.08 to get 
  Floppy information (Int 13.08 doesn't work on PC/XT floppy drives).

# 286 Protected Mode support - 286+ features
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

286 Protected Mode support
CONFIG_286PMODE
  Include support for 286 Protected Mode. Experimental. Use at your own
  risk. (This option will probably not interact well with the BIOS disk
  drivers)

# 286 Protected Mode support - 386+ features
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Support more than 16 Megs of RAM
CONFIG_386RAM
  Add support for RAM beyond 16 megs on 386+ systems. Currently
  nonexistant.

# Kernel hacking
# ~~~~~~~~~~~~~~

Strace
CONFIG_STRACE
  Strace displays a trace of all system calls made to the kernel. Only
  kernel hackers need this option.

Optimise for size rather than speed
CONFIG_OPT_SMALL
  Where two versions of a function exist this will cause the smaller
  version rather than the faster version to be included.

# Embedded systems
# ~~~~~~~~~~~~~~~~

Remove filesystem code
CONFIG_NOFS
  Remove the filesystem support for small embedded systems with no block
  devices.

Execute code from ROM
CONFIG_EXEC_ROM
  Add support for executing user processes in place from an image in ROM.
  Can be used even if no filesystem code is included.

  ~~~~~~~~~~~~CURRENTLY UNIMPLEMENTED~~~~~~~~~~~~~~~~~

# Console display support
# ~~~~~~~~~~~~~~~~~~~~~~~

Direct console writes
CONFIG_CONSOLE_DIRECT
  A direct console driver. This is currently the only console driver
  available for ELKS.

Direct console VT52 emulation
CONFIG_DCON_VT52
  Saying no removes some of the intelligent features from the console 
  code leaving a dumb text console which is much smaller.

Direct console ANSI emulation
CONFIG_DCON_ANSI
  Provide direct console support for ANSI (VT-102) terminals.

Use ANSI codes in printk()
CONFIG_DCON_ANSI_PRINTK
  When the kernel reports something using printk(), the reports will
  be coloured.

BIOS console writes
CONFIG_CONSOLE_BIOS
  The newly implemented BIOS based console driver.

BIOS console VT-52 emulation
CONFIG_BIOS_VT52
  This enables the use of VT-52 codes when using the BIOS console
  driver.

Serial console writes
CONFIG_CONSOLE_SERIAL
  The serial console driver. Currently minimal support for console output over
  a serial line.

# Keyboard support
# ~~~~~~~~~~~~~~~~

Use full keymap layout names
CONFIG_KEYMAP_FULL
  This option does not directly affect the code produced, but instead
  specifies whether to select the keyboard layout by abbreviated name
  (default, recommended for 'make config') or full name (recommended
  for 'make menuconfig'). Exactly the same options are available on
  each setting, they just have different names and occur in a different
  order.

Select XT keyboard support for American (US) keyboards
CONFIG_KEYMAP_US
  This option specifies that support be provided for XT keyboards with
  the American key layout. There are no dead keys with this layout.

Select XT keyboard support for Belgian (BE) keyboards
CONFIG_KEYMAP_BE
  This option specifies that support be provided for XT keyboards with
  the Belgian key layout and associated dead keys.

Select XT keyboard support for British (UK) keyboards
CONFIG_KEYMAP_UK
  This option specifies that support be provided for XT keyboards with
  the British key layout. There are no dead keys with this layout.

Select XT keyboard support for French (FR) keyboards
CONFIG_KEYMAP_FR
  This option specifies that support be provided for XT keyboards with
  the French key layout and associated dead keys.

Select XT keyboard support for German (DE) keyboards
CONFIG_KEYMAP_DE
  This option specifies that support be provided for XT keyboards with
  the German key layout and associated dead keys.

Select XT keyboard support for Dvorak (DV) keyboards
CONFIG_KEYMAP_DV
  This option specifies that support be provided for XT keyboards with
  the Dvorak key layout and associated dead keys.

Select XT keyboard support for Spanish (ES) keyboards
CONFIG_KEYMAP_ES
  This option specifies that support be provided for XT keyboards with
  the Spanish key layout and associated dead keys.

Raw keyboard mode
CONFIG_DCON_KRAW
  This option specified that support for raw keyboard scan code mode should
  be included in the keyboard driver.

# Character devices
# ~~~~~~~~~~~~~~~~~

Enable memory devices
CONFIG_CHAR_DEV_MEM
  Saying yes include support for the various memory character devices.
  Currently only mem, kmem, zero, null and full are supported.

Enable standard parallel (printer) ports
CONFIG_CHAR_DEV_LP
  Include support for parallel port devices. Currently under development.
  Please test.

Enable standard serial ports
CONFIG_CHAR_DEV_RS
  Include support for serial port devices.

Enable meta device driver
CONFIG_DEV_META
  Include meta driver to support users space device drivers.

Number of valid text consoles
CONFIG_CONSOLES_MAX
  ELKS (like Linux) can run with multiple virtual text consoles. Unlike
  Linux, there is a definite limit on the amount of memory available to
  implement this feature, and there is thus a need to limit the number
  of these consoles that are made available.

  This option allows the number of consoles to be made available to be
  configured, and valid responses are in the range from 3 to 9. Because
  of a historical legacy, the default is 3 consoles, as the serial ports
  were originally mapped to conflict with virtual text consoles 4 to 7.

# Block devices
# ~~~~~~~~~~~~~

BIOS block device support
CONFIG_BLK_DEV_BIOS
  Device driver that allows access to floppy and hard drives through
  BIOS. Currently required.

BIOS Floppy Drive support
CONFIG_BLK_DEV_BFD
  Option to allow floppy code to be left out of BIOS device driver.

BIOD Hard Drive support
CONFIG_BLK_DEV_BHD
  Option to allow HDD code to be left out of BIOS device driver.

Normal Floppy Disk support
CONFIG_BLK_DEV_FD
  Device driver that provides direct support for floppy drives.
  Currently does not work.

Normal Hard Disk support
CONFIG_BLK_DEV_HD
  Device driver that provides direct access to IDE hard disks by Blaz
  Antonic. Currently not tested. Use at you own risk.

RAM Drive support
CONFIG_BLK_DEV_RAM
  Support for a RAM disk device driver which allows up to 8 64K ram
  drives to be implemented. Not very useful, but can be adapted to make use
  of EMS cards etc.

Old XT Hard Disk support
CONFIG_BLK_DEV_XD
  None existant device driver.

Character access to block devices
CONFIG_BLK_DEV_CHAR
  Used to create and check filesystems, and by fdisk. Recommended.

# File systems
# ~~~~~~~~~~~~

# Select available file systems

Minix file system support
CONFIG_MINIX_FS
  Support for the basic Minix filesystem. The only currently working 
  filesystem. Until another filesystem is working this is required.

ELKS file system support
CONFIG_ELKSFS_FS
  Support for the new ELKSFS native fs. Includes Minix fs emulation.

MS-DOS file system support
CONFIG_MSDOS_FS
  Support for standard MS-DOS style partitions. 

  ~~~~~~~~~~~~~~~~Currently non-existant~~~~~~~~~~~~~~

Include VFAT style long name support
CONFIG_VFAT_FS
  Extension to standard MS-DOS fs support to permit Win95 style long
  file names. 

  ~~~~~~~~~~~~~~~~Currently non-existant~~~~~~~~~~~~~

ROM file system support
CONFIG_ROMFS_FS
  Incomplete support for the Read Only filesystem.

Full VFS support
CONFIG_FULL_VFS
  If you say no to this then the vfs will only support one filesystem 
  type. You do not need to say yes currently as only minixfs is
  available.

Extra external buffer cache
CONFIG_FS_EXTERNAL_BUFFER
  If you say no to this then the filesystem will not allocate 64K of
  buffers in main memory. This saves RAM, and makes the kernel smaller
  and simpler, but cripples performance on systems with slow block devices
  like floppies or old hard disks. This option should only be specified as
  no for systems which have very fast block devices such as RAM, ROM or
  Flash disks. It is also useful for stress testing the block device
  code.
  
Inter-process pipe support
CONFIG_PIPE
  Include support for standard UNIX inter-process pipes.

Make all file systems read-only
CONFIG_FS_RO
  Saying yes this option makes all access to the filesystem read only.
  Support for system calls that modify the filesystem is removed. This
  option allows a considerable amount of code space to be saved, thus
  allowing other features into the kernel.

# Executable file formats
# ~~~~~~~~~~~~~~~~~~~~~~~

Suport for suid/sgid executables
CONFIG_EXEC_SUGID
  This allows support for the suid and sgid bits for binaries.


Minix file format
CONFIG_EXEC_MINIX
  This lets you run Minix binaries compiled with bcc. This is the only
  real format allowed at the moment. 

  ~~~~~~~~~~~~~~~~~~~Required~~~~~~~~~~~~~~~~~~

MSDOS (EXE) file format
CONFIG_EXEC_MSDOS
  This lets you run MSDOS .EXE files under ELKS. This support is VERY
  ALPHA at the moment, and may not work. Use with caution. ie. If you
  compile this in, and something breaks, then remove it, and try again.
  In particluar, you might find you can't run any programs, including
  init and login.

# Networking support
# ~~~~~~~~~~~~~~~~~~

Socket support
CONFIG_SOCKET
  Include support for BSD style socket system calls. Currently under
  development.

UNIX sockets
CONFIG_UNIX
  Include support for AF_UNIX sockets. Enlarges kernel by 3KB. Currently
  under development.

NANO sockets
CONFIG_NANO
  Include support for experimental AF_NANO sockets. Enlarges kernel by
  3KB. Currently under development.

INET_sockets
CONFIG_INET
  Include support for AF_INET TCP/IP sockets. This depends on a user
  space process to work. Read the Documentation/networking.txt for more
  info.  Enlarges kernel by 3KB.
  Warning that this code is very unstable.

Enable status report
CONFIG_INET_STATUS
  If you intent to use utilities like netstat say YES. If you don't say
  NO it will save size from ktcp.

Only support client sockets
CONFIG_SOCK_CLIENTONLY
  Only include support for outgoing connections. Use this in case you
  just need to save some extra bytes out of the kernel. Saves around 450
  bytes. If you are not sure just say NO.

# EOF
