BUGS
----

This is a list of things I have noticed go wrong. Please submit additions to
this file if you find any kernel related bugs.

	Al
--

The interrupt routine for the serial driver rs_irq() is currently not called 
when the serial port should be generating an interrupt. It is not clear why,
but it is probable there is a bug somewhere in the serial port configuration
code


Sometimes unmounting a non-root filesystem returns EBUSY when nothing is using,
and nothing seems to rectify it.


Sometimes for no aparent reason the umount command gives a STACK collided with
BSS error without unmounting the filesystem.


Deleting data from the filesystem results almost always with a
"Deleting block not in data zone" type error message, and sometimes crashes.
This seems to be due to the following line in V1_trunc_direct
-               p = i + inode->u.minix_i.u.i1_data;
+               p = inode->i_zone[i];
The botton version being the ELKS version, the top one is the Linux version.
The two don't seem to bear any relation to each other. This has now nearly been fixed by chenging the above line to:-
		p = &inode->i_zone[i];
But blocks are still not freed when the fs is checked later, and neither is the inode! Looking through truncate.c, and minix_free_block, there is heavy use
of longs which are just not necessary.
Fixed excessive use of longs, and got fs to the stage where some blocks are
freed, and deleting large files no longer results in a system crash.


Adding register variables to schedule causes a the chq wait queue to get 
corrupted. See comments at the top of schedule() in kernel/sched.c. I
occasionly get the same wait_queue corruption message when heavily testing the
multitasking.


Shell sometimes reports "No such file or directory" when it means "Out of
memory".


fchown function seems to corrupt inode table. (See login source code).
